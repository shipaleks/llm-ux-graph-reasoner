#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ (–ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞).
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ WEBVTT —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã,
–∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥–µ–ª–∏ Gemini —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –æ–∫–Ω–æ–º.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    ./analyze_any.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> [--output <–≤—ã—Ö–æ–¥–Ω–∞—è_–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è>]
"""

import os
import sys
import logging
import time
import argparse
import asyncio
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –º–æ–¥—É–ª—è–º
llm_analyzer_path = current_dir / "llm_analyzer.py"
llm_segmenter_path = current_dir / "llm_segmenter.py"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
if not llm_analyzer_path.exists():
    logger.error(f"–§–∞–π–ª llm_analyzer.py –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {llm_analyzer_path}")
    sys.exit(1)
if not llm_segmenter_path.exists():
    logger.error(f"–§–∞–π–ª llm_segmenter.py –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {llm_segmenter_path}")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é
import importlib.util
spec = importlib.util.spec_from_file_location("llm_analyzer", llm_analyzer_path)
llm_analyzer = importlib.util.module_from_spec(spec)
spec.loader.exec_module(llm_analyzer)
LLMAnalyzer = llm_analyzer.LLMAnalyzer

def parse_arguments():
    """–†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ (–ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞)"
    )
    
    parser.add_argument(
        "file_path",
        help="–ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    parser.add_argument(
        "--output", "-o",
        default="output/unified_analysis",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: output/unified_analysis)"
    )
    
    parser.add_argument(
        "--max-segments", "-m",
        type=int,
        default=None,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
    )
    
    return parser.parse_args()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_arguments()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(args.file_path):
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.file_path}")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = LLMAnalyzer(output_dir=args.output)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    start_time = time.time()
    logger.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {args.file_path}")
    
    try:
        report_path = await analyzer.analyze_text(args.file_path, args.max_segments)
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
        print("üåê –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")
        return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        return 1

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    sys.exit(asyncio.run(main()))