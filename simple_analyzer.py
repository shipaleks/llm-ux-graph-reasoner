#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –ª—é–±—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ WEBVTT.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    ./simple_analyzer.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>
"""

import os
import sys
import json
import time
import logging
import asyncio
from datetime import datetime
from pathlib import Path
import google.generativeai as genai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç GOOGLE_API_KEY.")
    sys.exit(1)

genai.configure(api_key=GOOGLE_API_KEY)

async def analyze_text(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini."""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    output_dir = f"output/simple/{timestamp}"
    os.makedirs(output_dir, exist_ok=True)
    
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            text = f.read()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return 1
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    is_russian = detect_russian(text)
    language = "ru" if is_russian else "en"
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {'—Ä—É—Å—Å–∫–∏–π' if is_russian else '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'}")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
    is_webvtt = text.startswith("WEBVTT")
    logger.info(f"–§–æ—Ä–º–∞—Ç WEBVTT: {'–¥–∞' if is_webvtt else '–Ω–µ—Ç'}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ WEBVTT
    if is_webvtt:
        text = clean_webvtt(text)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.0 —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –æ–∫–Ω–æ–º –≤ 2 –º–∏–ª–ª–∏–æ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤
    model = genai.GenerativeModel('gemini-2.0-pro-exp-02-05')
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π...")
    if is_russian:
        summary_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ —Å–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é. 
        –í–∫–ª—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∑–∏—Å—ã –∏ 5-7 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.
        
        –¢–µ–∫—Å—Ç:
        {text[:30000]}  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        """
    else:
        summary_prompt = f"""
        Analyze the following text and provide a detailed summary. 
        Include a title, main points, and 5-7 key insights.
        
        Text:
        {text[:30000]}  # Token limit
        """
    
    summary_response = await run_gemini(model, summary_prompt)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–æ—Ä–∏–π
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–æ—Ä–∏–π...")
    if is_russian:
        theory_prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 3-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–æ—Ä–∏–π –∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑.
        –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–æ—Ä–∏–∏ —É–∫–∞–∂–∏:
        1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏
        2. –û–ø–∏—Å–∞–Ω–∏–µ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
        3. –°—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0-100%)
        4. 2-3 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        –¢–µ–∫—Å—Ç:
        {text[:30000]}  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        """
    else:
        theory_prompt = f"""
        Based on the following text, formulate 3-5 main theories or hypotheses.
        For each theory, include:
        1. Theory name
        2. Description (3-5 sentences)
        3. Confidence level (0-100%)
        4. 2-3 supporting facts from the text
        
        Text:
        {text[:30000]}  # Token limit
        """
    
    theory_response = await run_gemini(model, theory_prompt)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞
    report_path = os.path.join(output_dir, "report.html")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ HTML-–æ—Ç—á–µ—Ç–∞
    if is_russian:
        title = "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"
        summary_title = "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è"
        theory_title = "–¢–µ–æ—Ä–∏–∏ –∏ –≥–∏–ø–æ—Ç–µ–∑—ã"
        file_label = "–§–∞–π–ª"
        date_label = "–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"
    else:
        title = "Text Analysis"
        summary_title = "Summary"
        theory_title = "Theories and Hypotheses"
        file_label = "File"
        date_label = "Analysis Date"
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="{language}">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{title}</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                color: #333;
            }}
            h1, h2 {{
                color: #2c3e50;
            }}
            .container {{
                background-color: #f5f9ff;
                border-left: 4px solid #4a90e2;
                margin-bottom: 20px;
                padding: 15px;
                border-radius: 4px;
            }}
            .metadata {{
                background-color: #f9f9f9;
                padding: 15px;
                border-left: 4px solid #2c3e50;
                margin-bottom: 20px;
            }}
            pre {{
                white-space: pre-wrap;
                background-color: #f8f8f8;
                padding: 10px;
                border-radius: 4px;
            }}
        </style>
    </head>
    <body>
        <h1>{title}</h1>
        
        <div class="metadata">
            <p><strong>{file_label}:</strong> {os.path.basename(file_path)}</p>
            <p><strong>{date_label}:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
        
        <h2>{summary_title}</h2>
        <div class="container">
            <pre>{summary_response}</pre>
        </div>
        
        <h2>{theory_title}</h2>
        <div class="container">
            <pre>{theory_response}</pre>
        </div>
    </body>
    </html>
    """
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
    
    return 0

async def run_gemini(model, prompt):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Gemini —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

def detect_russian(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º."""
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    sample = text[:10000]  # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    cyrillic_count = sum(1 for c in sample if '–∞' <= c.lower() <= '—è')
    total_chars = sum(1 for c in sample if c.isalpha())
    
    if total_chars == 0:
        return False
        
    cyrillic_ratio = cyrillic_count / total_chars
    return cyrillic_ratio > 0.3

def clean_webvtt(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç WEBVTT –æ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫."""
    lines = text.split('\n')
    cleaned_lines = []
    
    skip_next = False
    for line in lines:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ WEBVTT
        if line.startswith("WEBVTT"):
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line.strip():
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏
        if "-->" in line and any(c.isdigit() for c in line):
            skip_next = False
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        if line.strip().isdigit():
            skip_next = True
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥
        if skip_next:
            skip_next = False
            continue
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        cleaned_lines.append(line)
    
    return "\n".join(cleaned_lines)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./simple_analyzer.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")
        return 1
    
    file_path = sys.argv[1]
    if not os.path.exists(file_path):
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return 1
    
    return await analyze_text(file_path)

if __name__ == "__main__":
    asyncio.run(main())